// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Spaces        Spaces[]
  Testimonial   Testimonial[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  token   String
  expires DateTime
  email   String
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String
  expires DateTime
  email   String
}

enum Theme {
  Light
  Dark
}

model Spaces {
  id            String        @id @default(cuid())
  name          String
  logo          String?
  title         String
  message       String
  rating        Boolean?
  theme         Theme?        @default(Light)
  questionOne   String?
  questionTwo   String?
  questionThree String?
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  Testimonial   Testimonial[]
  
}

model Testimonial {
  id         String  @id @default(cuid())
  message    String
  rating     Int
  image      String
  name       String
  email      String
  photo      String
  permission Boolean @default(false)
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  spaceId    String
  space      Spaces  @relation(fields: [spaceId], references: [id])
}
